import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcrypt';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

  // ============================================================================
  // –ü–†–ê–í–ê –î–û–°–¢–£–ü–ê
  // ============================================================================
  
  console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...');
  
  const permissions = [
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    { name: 'users.view', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', category: 'users' },
    { name: 'users.create', description: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', category: 'users' },
    { name: 'users.edit', description: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', category: 'users' },
    { name: 'users.delete', description: '–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', category: 'users' },
    
    // –†–æ–ª–∏
    { name: 'roles.view', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–æ–ª–µ–π', category: 'roles' },
    { name: 'roles.create', description: '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π', category: 'roles' },
    { name: 'roles.edit', description: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–π', category: 'roles' },
    { name: 'roles.delete', description: '–£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π', category: 'roles' },
    
    // –¢–æ–≤–∞—Ä—ã
    { name: 'products.view', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤', category: 'products' },
    { name: 'products.create', description: '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤', category: 'products' },
    { name: 'products.edit', description: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤', category: 'products' },
    { name: 'products.delete', description: '–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤', category: 'products' },
    { name: 'products.import', description: '–ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤', category: 'products' },
    
    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    { name: 'categories.view', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π', category: 'categories' },
    { name: 'categories.create', description: '–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', category: 'categories' },
    { name: 'categories.edit', description: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', category: 'categories' },
    { name: 'categories.delete', description: '–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', category: 'categories' },
    
    // –ü—Ä–æ–¥–∞–∂–∏
    { name: 'sales.view', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–¥–∞–∂', category: 'sales' },
    { name: 'sales.create', description: '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂', category: 'sales' },
    { name: 'sales.edit', description: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂', category: 'sales' },
    { name: 'sales.cancel', description: '–û—Ç–º–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂', category: 'sales' },
    { name: 'sales.refund', description: '–í–æ–∑–≤—Ä–∞—Ç –ø—Ä–æ–¥–∞–∂', category: 'sales' },
    
    // –ö–ª–∏–µ–Ω—Ç—ã
    { name: 'customers.view', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–ª–∏–µ–Ω—Ç–æ–≤', category: 'customers' },
    { name: 'customers.create', description: '–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤', category: 'customers' },
    { name: 'customers.edit', description: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤', category: 'customers' },
    { name: 'customers.delete', description: '–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤', category: 'customers' },
    
    // –ë–æ–Ω—É—Å—ã
    { name: 'bonuses.view', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä –±–æ–Ω—É—Å–æ–≤', category: 'bonuses' },
    { name: 'bonuses.accrual', description: '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤', category: 'bonuses' },
    { name: 'bonuses.spending', description: '–°–ø–∏—Å–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤', category: 'bonuses' },
    { name: 'bonuses.adjustment', description: '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –±–æ–Ω—É—Å–æ–≤', category: 'bonuses' },
    
    // –û—Ç—á–µ—Ç—ã
    { name: 'reports.view', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤', category: 'reports' },
    { name: 'reports.export', description: '–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤', category: 'reports' },
    { name: 'reports.financial', description: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã', category: 'reports' },
    
    // –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã/–¢–µ—Ä–º–∏–Ω–∞–ª—ã
    { name: 'counterparties.view', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤', category: 'counterparties' },
    { name: 'counterparties.create', description: '–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤', category: 'counterparties' },
    { name: 'counterparties.edit', description: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤', category: 'counterparties' },
    { name: 'counterparties.delete', description: '–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤', category: 'counterparties' },
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    { name: 'settings.view', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫', category: 'settings' },
    { name: 'settings.edit', description: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫', category: 'settings' },
  ];

  for (const permission of permissions) {
    await prisma.permission.upsert({
      where: { name: permission.name },
      update: {},
      create: permission,
    });
  }

  // ============================================================================
  // –†–û–õ–ò
  // ============================================================================
  
  console.log('üë• –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π...');
  
  // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –≤—Å–µ –ø—Ä–∞–≤–∞
  const adminRole = await prisma.role.upsert({
    where: { name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' },
    update: {},
    create: {
      name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã',
      isSystem: true,
    },
  });

  // –ú–µ–Ω–µ–¥–∂–µ—Ä - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∞–º–∏ –∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
  const managerRole = await prisma.role.upsert({
    where: { name: '–ú–µ–Ω–µ–¥–∂–µ—Ä' },
    update: {},
    create: {
      name: '–ú–µ–Ω–µ–¥–∂–µ—Ä',
      description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∞–º–∏, –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –æ—Ç—á–µ—Ç–∞–º–∏',
      isSystem: true,
    },
  });

  // –ö–∞—Å—Å–∏—Ä - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–∏
  const cashierRole = await prisma.role.upsert({
    where: { name: '–ö–∞—Å—Å–∏—Ä' },
    update: {},
    create: {
      name: '–ö–∞—Å—Å–∏—Ä',
      description: '–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –∏ —Ä–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏',
      isSystem: true,
    },
  });

  // –ü—Ä–∏–≤—è–∑–∫–∞ –ø—Ä–∞–≤ –∫ —Ä–æ–ª—è–º
  const allPermissions = await prisma.permission.findMany();
  
  // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –≤—Å–µ –ø—Ä–∞–≤–∞
  for (const permission of allPermissions) {
    await prisma.rolePermission.upsert({
      where: {
        roleId_permissionId: {
          roleId: adminRole.id,
          permissionId: permission.id,
        },
      },
      update: {},
      create: {
        roleId: adminRole.id,
        permissionId: permission.id,
      },
    });
  }

  // –ú–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã–±–æ—Ä–æ—á–Ω—ã–µ –ø—Ä–∞–≤–∞
  const managerPermissions = allPermissions.filter(p => 
    !p.name.includes('users.') && 
    !p.name.includes('roles.') &&
    !p.name.includes('settings.')
  );
  
  for (const permission of managerPermissions) {
    await prisma.rolePermission.upsert({
      where: {
        roleId_permissionId: {
          roleId: managerRole.id,
          permissionId: permission.id,
        },
      },
      update: {},
      create: {
        roleId: managerRole.id,
        permissionId: permission.id,
      },
    });
  }

  // –ö–∞—Å—Å–∏—Ä - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞
  const cashierPermissionNames = [
    'products.view',
    'categories.view', 
    'sales.view',
    'sales.create',
    'customers.view',
    'customers.create',
    'bonuses.view',
    'bonuses.spending',
  ];
  
  const cashierPermissions = allPermissions.filter(p => 
    cashierPermissionNames.includes(p.name)
  );
  
  for (const permission of cashierPermissions) {
    await prisma.rolePermission.upsert({
      where: {
        roleId_permissionId: {
          roleId: cashierRole.id,
          permissionId: permission.id,
        },
      },
      update: {},
      create: {
        roleId: cashierRole.id,
        permissionId: permission.id,
      },
    });
  }

  // ============================================================================
  // –ö–û–ù–¢–†–ê–ì–ï–ù–¢–´
  // ============================================================================
  
  console.log('üè¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤...');
  
  const mainTerminal = await prisma.counterparty.upsert({
    where: { code: 'MAIN_TERMINAL' },
    update: {},
    create: {
      name: '–ì–ª–∞–≤–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª',
      type: 'TERMINAL',
      code: 'MAIN_TERMINAL',
      address: '–û—Ñ–∏—Å –∫–æ–º–ø–∞–Ω–∏–∏',
      settings: {
        printReceipts: true,
        allowDiscount: true,
        maxDiscountPercent: 20,
        workingHours: {
          start: '09:00',
          end: '21:00'
        }
      },
    },
  });

  // ============================================================================
  // –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò
  // ============================================================================
  
  console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  
  const hashedPassword = await bcrypt.hash('admin123', 10);
  
  const adminUser = await prisma.user.upsert({
    where: { email: 'admin@pos-crm.local' },
    update: {},
    create: {
      email: 'admin@pos-crm.local',
      username: 'admin',
      password: hashedPassword,
      firstName: '–°–∏—Å—Ç–µ–º–Ω—ã–π',
      lastName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      phone: '+7 (999) 123-45-67',
      status: 'APPROVED',
      isActive: true,
    },
  });

  // –ü—Ä–∏–≤—è–∑–∫–∞ —Ä–æ–ª–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  await prisma.userRole.upsert({
    where: {
      userId_roleId: {
        userId: adminUser.id,
        roleId: adminRole.id,
      },
    },
    update: {},
    create: {
      userId: adminUser.id,
      roleId: adminRole.id,
    },
  });

  // –ü—Ä–∏–≤—è–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ç–µ—Ä–º–∏–Ω–∞–ª—É
  await prisma.counterpartyUser.upsert({
    where: {
      counterpartyId_userId: {
        counterpartyId: mainTerminal.id,
        userId: adminUser.id,
      },
    },
    update: {},
    create: {
      counterpartyId: mainTerminal.id,
      userId: adminUser.id,
    },
  });

  // ============================================================================
  // –ö–ê–¢–ï–ì–û–†–ò–ò
  // ============================================================================
  
  console.log('üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
  
  const categories = [
    { name: '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è', description: '–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è' },
    { name: '–ù–∞–ø–∏—Ç–∫–∏', description: '–ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –∏ –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏' },
    { name: '–•–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã', description: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞ –∏ –±—ã—Ç–∞' },
    { name: '–ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –≥–∏–≥–∏–µ–Ω–∞', description: '–°—Ä–µ–¥—Å—Ç–≤–∞ –∫—Ä–∞—Å–æ—Ç—ã –∏ –≥–∏–≥–∏–µ–Ω—ã' },
  ];

  const createdCategories = [];
  for (const category of categories) {
    const created = await prisma.category.upsert({
      where: { name: category.name },
      update: {},
      create: {
        name: category.name,
        description: category.description,
        sortOrder: createdCategories.length,
      },
    });
    createdCategories.push(created);
  }

  // ============================================================================
  // –¢–û–í–ê–†–´
  // ============================================================================
  
  console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤...');
  
  const products = [
    {
      name: '–•–ª–µ–± –±–µ–ª—ã–π',
      sku: 'BREAD001',
      barcode: '4607034170000',
      price: 45.50,
      cost: 32.00,
      stock: 100,
      categoryName: '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è',
      bonusPercent: 2.0,
    },
    {
      name: '–ú–æ–ª–æ–∫–æ 3.2%',
      sku: 'MILK001',
      barcode: '4607034170001',
      price: 89.90,
      cost: 65.00,
      stock: 50,
      categoryName: '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è',
      bonusPercent: 3.0,
    },
    {
      name: '–í–æ–¥–∞ –ø–∏—Ç—å–µ–≤–∞—è 1.5–ª',
      sku: 'WATER001',
      barcode: '4607034170002',
      price: 35.00,
      cost: 22.00,
      stock: 200,
      categoryName: '–ù–∞–ø–∏—Ç–∫–∏',
      bonusPercent: 1.0,
    },
    {
      name: '–®–∞–º–ø—É–Ω—å',
      sku: 'SHAMP001',
      barcode: '4607034170003',
      price: 299.99,
      cost: 180.00,
      stock: 25,
      categoryName: '–ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –≥–∏–≥–∏–µ–Ω–∞',
      bonusPercent: 5.0,
    },
  ];

  for (const product of products) {
    const category = createdCategories.find(c => c.name === product.categoryName);
    
    await prisma.product.upsert({
      where: { sku: product.sku },
      update: {},
      create: {
        name: product.name,
        sku: product.sku,
        barcode: product.barcode,
        price: product.price,
        cost: product.cost,
        stock: product.stock,
        minStock: 10,
        maxStock: 500,
        categoryId: category?.id,
        bonusPercent: product.bonusPercent,
        isActive: true,
      },
    });
  }

  // ============================================================================
  // –¢–ï–°–¢–û–í–´–ô –ö–õ–ò–ï–ù–¢
  // ============================================================================
  
  console.log('üë• –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...');
  
  await prisma.customer.upsert({
    where: { email: 'test@customer.local' },
    update: {},
    create: {
      firstName: '–ò–≤–∞–Ω',
      lastName: '–ò–≤–∞–Ω–æ–≤',
      email: 'test@customer.local',
      phone: '+7 (999) 111-22-33',
      bonusBalance: 150.00,
      isActive: true,
    },
  });

  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!');
  console.log('');
  console.log('üîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
  console.log('Email: admin@pos-crm.local');
  console.log('Password: admin123');
  console.log('');
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  }); 